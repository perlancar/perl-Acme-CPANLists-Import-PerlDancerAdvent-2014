<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-type" content="text/html; charset=utf-8" />
<title> Command line dancing | PerlDancer Advent Calendar</title>
<link rel="stylesheet" href="/css/style.css" />
<link rel="alternate" type="application/rss+xml" title="All Articles " href="/feed/2014" /> 


<!-- Grab Google CDN's jQuery. fall back to local if necessary -->
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js" type="text/javascript"></script>
<script type="text/javascript">/* <![CDATA[ */
    !window.jQuery && document.write('<script src="/javascripts/jquery.js"><\/script>')
/* ]]> */</script>

<!-- Prettyfy -->
<link href="/css/prettify.css" type="text/css" rel="stylesheet" />
<script type="text/javascript" src="/javascripts/prettify.js"></script>

</head>
<body onload="prettyPrint()">
<div id="page">

<div id="sidebar">
<a href="/" class="homelink">Dancer Advent Calendar</a><br />

<p>
The PerlDancer Advent Calendar is a community-driven project that aims 
to showcase the Dancer Perl web framework.
</p>

<p>
Each day of December until Christmas, one article about Dancer. Stay tuned for new moves!
</p>

<ul id="sidebar-items">
<li>
    <h3>About Dancer</h3>
    <ul class="links">
        <li><a href="http://www.perldancer.org/">Dancer homepage</a></li>
        <li><a href="http://twitter.com/PerlDancer">Official Twitter</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer">Dancer on GitHub</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer2">Dancer 2 on GitHub</a></li>
        <li><a class="feed" href="/feed/2014">RSS</a></li>
    </ul>
</li>
</ul>
</div>


<div id="content">
<div class="pod-document"><h1><a name="command_line_dancing"></a>Command line dancing</h1>

<p>Some of the changes <a href="https://metacpan.org/module/Dancer2">Dancer2</a> has introduced were the removal of all
import tags:</p>
<pre class="prettyprint">use Dancer ':syntax'; # use Dancer2;
use Dancer ':script'; # use Dancer2;
use Dancer ':tests';  # use Dancer2;</pre>

<p>Now you simply call <code>use Dancer2</code> for all of these. It will create an
application and provide keywords. If you want to create a <a href="https://metacpan.org/module/PSGI">PSGI</a>
application from it, simply call <code>to_app</code> on your class. Otherwise,
it doesn't get in the way.</p>
<h2><a name="but_i_need_it"></a>But I need it</h2>

<p>While the last paragraph actually summed up this entire article, it
probably wasn't very clear.</p>
<p>A useful feature of going through Dancer itself is that it will read
the configuration files, parse them, understand them, and even create
objects lazily using them.</p>
<p>People often write scripts that have to then duplicate what Dancer
does. It's quite understandable that people wish to be able to use
Dancer in their scripts to have access to the configuration and the
generated objects.</p>
<h2><a name="reaching_the_config"></a>Reaching the config</h2>

<p>By importing <a href="https://metacpan.org/module/Dancer2">Dancer2</a> in your command line scripts, you have full
access to the configuration using the imported keywords:</p>
<pre class="prettyprint"># myscript.pl:
use Dancer2; # strict &amp;&amp; warnings included

# this works:
my $appname = config-&gt;{'appname'};

# and so does this:
my $appname = app-&gt;name;</pre>

<p>You shouldn't worry about <i>myscript.pl</i> becoming an app and starting
a web server. Yes, as soon as it hits <code>use Dancer2</code> it will create
a Dancer2 application behind the scenes, and that app can be run at
any given point in time by calling <code>dance</code> or the preferred method
<code>to_app</code> on it, but unless you actually call those, this app will
simply be created in the background.</p>
<p>You will still be able to access all the configuration from it without
having to run it under a web environment.</p>
<h2><a name="small_example"></a>Small example</h2>

<p>One small example of wanting to access the configurations from a command
line script would be to run some sort of import to or export from a
database.</p>
<p>Being able to access the configuration file and having the classes that
are automatically inflated from that configuration file is mighty useful.</p>
<pre class="prettyprint"># myscript.pl:
use Dancer2
use Dancer2::Plugin::Database;

my $user_id = $ARGV[0] or die "$0 &lt;USER ID&gt;\n";
$user_id =~ /^[0-9]+$/ or die "User ID must be a positive number\n";

my $sth = database-&gt;prepare( 'select * from users where id = ?' );
$sth-&gt;execute($user_id);

...</pre>

<h2><a name="conclusion"></a>Conclusion</h2>

<p>If you want to create command line applications that use the Dancer2
structures, you can simply load Dancer2 and use the keywords it provides
you.</p>
<p>What does this give you access to?</p>
<ul>
<li><a name="item_Dancer_keywords"></a><b>Dancer keywords</b>
<p><code>config</code> probably being the most helpful one, but <code>template</code> will also
be available just like other engine-related keywords are - explained
below under <i>Engines</i>.</p>
</li>
<li><a name="item_Keywords_created_by_plugins"></a><b>Keywords created by plugins</b>
<p>This means you can make use of any functionality they provide outside of
a request.</p>
</li>
<li><a name="item_Engines"></a><b>Engines</b>
<p>This means you can use the facilities your web application has when
logging events (using <code>debug</code>, <code>warning</code>, and <code>error</code>), accessing or
setting session information, serializing, and even rendering templates
(using the <code>template</code> keyword).</p>
</li>
</ul>
<h2><a name="author"></a>Author</h2>

<p>This article has been written by Sawyer X for the Perl
Dancer Advent Calendar 2014.</p>
<h2><a name="copyright"></a>Copyright</h2>

<p>No copyright retained. Enjoy.</p>
<p>2014 // Sawyer X <code>&lt;xsawyerx@cpan.org&gt;</code></p>
</div>

 <div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'danceradvent'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>




</div>



<div id="footer">
Powered by the  
<a href="http://perldancer.org/" title="Perl Dancer - Perl web framework">
Dancer Perl web framework</a>
</div>
</div>


<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-25174467-2']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</body>
</html>
