<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-type" content="text/html; charset=utf-8" />
<title> Packing the Fat | PerlDancer Advent Calendar</title>
<link rel="stylesheet" href="/css/style.css" />
<link rel="alternate" type="application/rss+xml" title="All Articles " href="/feed/2014" /> 


<!-- Grab Google CDN's jQuery. fall back to local if necessary -->
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js" type="text/javascript"></script>
<script type="text/javascript">/* <![CDATA[ */
    !window.jQuery && document.write('<script src="/javascripts/jquery.js"><\/script>')
/* ]]> */</script>

<!-- Prettyfy -->
<link href="/css/prettify.css" type="text/css" rel="stylesheet" />
<script type="text/javascript" src="/javascripts/prettify.js"></script>

</head>
<body onload="prettyPrint()">
<div id="page">

<div id="sidebar">
<a href="/" class="homelink">Dancer Advent Calendar</a><br />

<p>
The PerlDancer Advent Calendar is a community-driven project that aims 
to showcase the Dancer Perl web framework.
</p>

<p>
Each day of December until Christmas, one article about Dancer. Stay tuned for new moves!
</p>

<ul id="sidebar-items">
<li>
    <h3>About Dancer</h3>
    <ul class="links">
        <li><a href="http://www.perldancer.org/">Dancer homepage</a></li>
        <li><a href="http://twitter.com/PerlDancer">Official Twitter</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer">Dancer on GitHub</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer2">Dancer 2 on GitHub</a></li>
        <li><a class="feed" href="/feed/2014">RSS</a></li>
    </ul>
</li>
</ul>
</div>


<div id="content">
<div class="pod-document"><h1><a name="packing_the_fat"></a>Packing the Fat</h1>

<p>After speaking of one way to handle dependencies, it's time to talk about
another.</p>
<p>One promise we've made with <a href="https://metacpan.org/module/Dancer2">Dancer2</a> is it will always be <i>fatpackable</i>,
but only a few people actually know what this means and why it's
important.</p>
<p>If you keep on reading, you're going to join that group of people.</p>
<h2><a name="fatpacker"></a>FatPacker</h2>

<p>One of the reasons people worry about dependencies is not being able to
install them. Of course you could use <a href="https://metacpan.org/module/local::lib">local::lib</a> or <a href="https://metacpan.org/module/carton">carton</a> to
install them locally, but another mechanism available is <a href="https://metacpan.org/module/App::FatPacker">App::FatPacker</a>.</p>
<p><a href="https://metacpan.org/module/App::FatPacker">App::FatPacker</a> (using its command line interface, <a href="https://metacpan.org/module/fatpack">fatpack</a>) packs
dependencies into a single file (hence the name), allowing you to carry
a single file instead of a directory tree.</p>
<p>If you're interested in understanding <a href="https://metacpan.org/module/App::FatPacker">App::FatPacker</a>, I have written
<a href="http://www.perladvent.org/2012/2012-12-14.html">an article</a> describing
it, how it works, and how to use it.</p>
<h2><a name="fatpacking_dancer2_applications"></a>FatPacking Dancer2 applications</h2>

<p>By saying <a href="https://metacpan.org/module/Dancer2">Dancer2</a> is fatpackable, we mean that we make sure the
Dancer2 can be fatpacked. We do this by requiring by default only
pure-Perl modules. We allow you to optionally install XS modules
to improve speed, but Dancer2 will work just fine without them.</p>
<p>This means that as long as your application is also pure-Perl, you could
create a single file with your application and all of Dancer2 in it.</p>
<p>Let's take a look at an example.</p>
<p>Assuming we have an application in <i>lib/MyApp.pm</i>:</p>
<pre class="prettyprint">package MyApp;
use Dancer2;
get '/' =&gt; sub {'OK'};
1;</pre>

<p>And we have a handler in <i>bin/app.pl</i>:</p>
<pre class="prettyprint">use strict;
use warnings;
use FindBin;
use lib "$FindBin::Bin/../lib";
use MyApp;

MyApp-&gt;to_app;</pre>

<p>To fatpack it, we will begin by tracing the script:</p>
<pre class="prettyprint">$ fatpack trace bin/app.pl</pre>

<p>This creates a <i>fatpacker.trace</i> file. From this we create the packlists:</p>
<pre class="prettyprint">$ fatpack packlists-for `cat fatpacker.trace` &gt; packlists</pre>

<p>The packlists are stored in a file called, surprisingly, <i>packlists</i>.</p>
<p>Now we create the tree using the following command:</p>
<pre class="prettyprint">$ fatpack tree `cat packlists`</pre>

<p>The tree is created under the directory <i>fatlib</i>.</p>
<p>Now that we have the tree, we simply need to pack it all together.  While
this will create a file containing the dependency tree, we also want to
add our script to it, so we'll do it all in one command:</p>
<pre class="prettyprint">$ (fatpack file; cat bin/app.pl) &gt; myapp.pl</pre>

<p>This creates a file called <i>myapp.pl</i> with everything in it. But before
we can run it, we need to account for one small detail. Dancer2
is using <a href="https://metacpan.org/module/MIME::Types">MIME::Types</a> which has a database of all MIME types and helps
translate those. The small database file containing all of these types is
a binary and therefore cannot be fatpacked. We need to copy it to
the current directory so our script can find it.</p>
<pre class="prettyprint">$ cp fatlib/MIME/types.db .</pre>

<p>Now we can use the file just like any other <a href="https://metacpan.org/module/PSGI">PSGI</a> application file:</p>
<pre class="prettyprint">$ plackup myapp.pl</pre>

<p>While we're using <code>plackup</code> here, it's just an example of a server that
will read this. You would usually configure this in your web server as
a PSGI application script.</p>
<h2><a name="conclusion"></a>Conclusion</h2>

<p><a href="https://metacpan.org/module/Dancer2">Dancer2</a> aims to allow you to package your apps in any number of ways
and <a href="https://metacpan.org/module/App::FatPacker">App::FatPacker</a> is a very useful packaging mechanism we aim to
continually support.</p>
<p>You can now easily pack everyting and send your
co-worker/colleague/enemy a single file that has everything in it,
all dependencies bundled in.</p>
<p>Next time someone says <i>"But I can't install anything"</i>, throw your
packed Dancer web application at them!</p>
<h2><a name="author"></a>Author</h2>

<p>This article has been written by Sawyer X for the Perl
Dancer Advent Calendar 2014.</p>
<h2><a name="copyright"></a>Copyright</h2>

<p>No copyright retained. Enjoy.</p>
<p>2014 // Sawyer X <code>&lt;xsawyerx@cpan.org&gt;</code></p>
</div>

 <div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'danceradvent'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>




</div>



<div id="footer">
Powered by the  
<a href="http://perldancer.org/" title="Perl Dancer - Perl web framework">
Dancer Perl web framework</a>
</div>
</div>


<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-25174467-2']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</body>
</html>
