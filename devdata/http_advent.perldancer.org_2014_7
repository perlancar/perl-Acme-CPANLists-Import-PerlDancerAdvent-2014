<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-type" content="text/html; charset=utf-8" />
<title> Doing an API Mashup with Dancer | PerlDancer Advent Calendar</title>
<link rel="stylesheet" href="/css/style.css" />
<link rel="alternate" type="application/rss+xml" title="All Articles " href="/feed/2014" /> 


<!-- Grab Google CDN's jQuery. fall back to local if necessary -->
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js" type="text/javascript"></script>
<script type="text/javascript">/* <![CDATA[ */
    !window.jQuery && document.write('<script src="/javascripts/jquery.js"><\/script>')
/* ]]> */</script>

<!-- Prettyfy -->
<link href="/css/prettify.css" type="text/css" rel="stylesheet" />
<script type="text/javascript" src="/javascripts/prettify.js"></script>

</head>
<body onload="prettyPrint()">
<div id="page">

<div id="sidebar">
<a href="/" class="homelink">Dancer Advent Calendar</a><br />

<p>
The PerlDancer Advent Calendar is a community-driven project that aims 
to showcase the Dancer Perl web framework.
</p>

<p>
Each day of December until Christmas, one article about Dancer. Stay tuned for new moves!
</p>

<ul id="sidebar-items">
<li>
    <h3>About Dancer</h3>
    <ul class="links">
        <li><a href="http://www.perldancer.org/">Dancer homepage</a></li>
        <li><a href="http://twitter.com/PerlDancer">Official Twitter</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer">Dancer on GitHub</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer2">Dancer 2 on GitHub</a></li>
        <li><a class="feed" href="/feed/2014">RSS</a></li>
    </ul>
</li>
</ul>
</div>


<div id="content">
<div class="pod-document"><h1><a name="doing_an_api_mashup_with_dancer"></a>Doing an API Mashup with Dancer</h1>

<p>I was delighted to receive a Twitter message from Su-Shee on an article
about mashing up an API call with <a href="http://www.sinatrarb.com/">Sinatra</a>:</p>
<blockquote class="twitter-tweet" lang="en"><p>.<a href="https://twitter.com/PerlSawyer">@PerlSawyer</a> tiny total beginner&#39;s <a href="https://twitter.com/hashtag/sinatra?src=hash">#sinatra</a> example, should be blatantly copied for <a href="https://twitter.com/hashtag/dancer?src=hash">#dancer</a>... <a href="https://t.co/SlSia0f92a">https://t.co/SlSia0f92a</a> &quot;learn how to API&quot; :)</p>&mdash; Su-Shee (@sheeshee) <a href="https://twitter.com/sheeshee/status/541175744358268928">December 6, 2014</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>You might wonder how a version of it would look like in Dancer. Shouldn't
be a problem. Let's have a go at it!</p>
<h2><a name="prior_work"></a>Prior work</h2>

<p>If you haven't had the time or inclination to read the aforementioned
article (which we actually recommend), here is a brief description of our
task.</p>
<p>We want to create an app that makes a request to a weather API and then
displays it dynamically in a web page.</p>
<h2><a name="to_everything_a_start"></a>To everything a start</h2>

<p>Setting up the application was relatively quick. Open up your favorite
editor on a new file. Let's call it <i>mashup.pl</i>:</p>
<p>Other than <a href="https://metacpan.org/module/Dancer2">Dancer2</a> for defining routes, we will use <a href="https://metacpan.org/module/HTTP::Tiny">HTTP::Tiny</a> to
make the weather API request, <a href="https://metacpan.org/module/JSON">JSON</a> to decode it from JSON format, and
finally <a href="https://metacpan.org/module/File::Spec">File::Spec</a> to provide a fully-qualified path to our template
engine. That last bit will be explained later on.</p>
<pre class="prettyprint">use JSON;
use Dancer2;
use HTTP::Tiny;
use File::Spec;</pre>

<h2><a name="configuration"></a>Configuration</h2>

<p>Now we set up some variables for our web application. We will use the
excellent <a href="https://metacpan.org/module/Template">Template::Toolkit</a> template system. It is simple and
easy to work with.</p>
<p>Dancer searches for our templates in our views directory, which defaults
to <i>views</i> directory in our current directory. Since we want to put our
template in our current directory, we will configure that. However,
<i>Template::Toolkit</i> does not want us to provide a relative path without
configuring it to allow it. This is a security issue. So, we're using
<a href="https://metacpan.org/module/File::Spec">File::Spec</a> to create a full path to where we are.</p>
<p>We also unset the default layout, so Dancer won't try to wrap our template
with another one. This is a feature in Dancer to allow you to wrap your
templates with a layout when your templating system doesn't support it.
Since we're not using a layout here, we don't need it.</p>
<pre class="prettyprint">set template =&gt; 'template_toolkit';       # set template engine
set layout   =&gt; undef;                    # disable layout
set views    =&gt; File::Spec-&gt;rel2abs('.'); # full path to views</pre>

<p>A lot of explanation and only three lines of code. :)</p>
<p>Now, we define our URL:</p>
<pre class="prettyprint">my $url = 'http://api.openweathermap.org/data/2.5/weather?id=5110629&amp;units=imperial';</pre>

<h2><a name="route___the_gist_of_it"></a>Route - the gist of it</h2>

<p>The main component is our web route. We will define a main route which,
upon a request, will fetch the information from the weather API, decode it,
and then display it to the user.</p>
<p>Route definition:</p>
<pre class="prettyprint">get '/' =&gt; sub {
    ...
};</pre>

<p>Editing the stub of route dispatching code, we start by making the
request and decoding it:</p>
<pre class="prettyprint"># fetch data
my $res = HTTP::Tiny-&gt;new-&gt;get($url);

# decode request
my $data = decode_json $res-&gt;{'content'};</pre>

<p>The data is not just a flat hash. It's a deep structure. To make this post
simpler, we will filter it for only the simple keys in the retrieved data:</p>
<pre class="prettyprint">my $metrics = { map +(
    ref $data-&gt;{$_} ? () : ( $_ =&gt; $data-&gt;{$_} )
), keys %{$data} };</pre>

<p>All that is left now is to render it:</p>
<pre class="prettyprint">template index =&gt; { metrics =&gt; $metrics };</pre>

<p>Oh, and to make this into a runnable-application, we add the magic word:</p>
<pre class="prettyprint">dance;</pre>

<h2><a name="and_the_template"></a>And the template</h2>

<p>We can't forget about the HTML code of course. The following is our
<i>index.tt</i> template file:</p>
<pre class="prettyprint">&lt;table&gt;
  &lt;th&gt;The Weather in Buffalo, NY, USA&lt;/th&gt;
  &lt;tr&gt;
    &lt;td&gt;
    [% FOREACH metric IN metrics.keys %]
        &lt;tr&gt;&lt;td&gt;[% metric %]&lt;/td&gt;&lt;td&gt;[% metrics.$metric %]&lt;/td&gt;&lt;/tr&gt;
    [% END %]
    &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;

&lt;hr noshade&gt;

Powered by the &lt;a href = 'http://openweathermap.org/' target = _new&gt;Open W
eather Map API&lt;/a&gt;</pre>

<p>Et Voila!</p>
<h2><a name="all_together_now"></a>All together now</h2>

<p>Here is our complete app:</p>
<pre class="prettyprint">use JSON;
use Dancer2;
use HTTP::Tiny;
use File::Spec;

set template =&gt; 'template_toolkit';
set layout   =&gt; undef;
set views    =&gt; File::Spec-&gt;rel2abs('.');

my $url = 'http://api.openweathermap.org/data/2.5/weather?id=5110629&amp;units=imperial';
get '/' =&gt; sub {
    my $res     = HTTP::Tiny-&gt;new-&gt;get($url);
    my $data    = decode_json $res-&gt;{'content'};
    my $metrics = { map +(
        ref $data-&gt;{$_} ? () : ( $_ =&gt; $data-&gt;{$_} )
    ), keys %{$data} };

    template index =&gt; { metrics =&gt; $metrics };
};

dance;</pre>

<p>And the result we have at the end:</p>
<table>
<th>The Weather in Buffalo, NY, USA</th>
<tr>
<td>
<tr><td>id</td><td>5110629</td></tr>
<tr><td>cod</td><td>200</td></tr>
<tr><td>name</td><td>Buffalo</td></tr>
<tr><td>base</td><td>cmc stations</td></tr>
<tr><td>dt</td><td>1417885200</td></tr>
</td>
</tr>
</table>
<hr noshade>
Powered by the <a href = 'http://openweathermap.org/' target = _new>Open Weather Map API</a>
<h2><a name="conclusion"></a>Conclusion</h2>

<p>Many of the odder configuration options were actually due to writing an
application outside the defaults of a normal production-ready application.</p>
<p>If we had a <i>views</i> directory, we wouldn't need <a href="https://metacpan.org/module/File::Spec">File::Spec</a> and
to configure the <code>views</code>. If we had used a layout, which we would normally
use, we wouldn't need to disable the layout using the <code>layout</code>
option. If we tried to account for all data returned, we would also write
a template that supports a deeper structure, or dumped it to HTML from its
hash representation, which would probably had been easier.</p>
<p>At the end, the production code would share all of these comments and end
up both smaller and simpler. Of course, our production code would check
for errors on fetching the data and decoding it, which we have conveniently
ignored. :)</p>
<p>One clear difference between our implementation and the <i>Sinatra</i> one is
we don't actually stick any HTML in the code itself. There is no need. We
simply throw it to the templating engine.</p>
<p>With light web frameworks writing your application is usually as
straight-forward and simple as it seems in our head.</p>
<h2><a name="author"></a>Author</h2>

<p>This article has been written by Sawyer X for the Perl
Dancer Advent Calendar 2014.</p>
<h2><a name="copyright"></a>Copyright</h2>

<p>No copyright retained. Enjoy.</p>
<p>2014 // Sawyer X <code>&lt;xsawyerx@cpan.org&gt;</code></p>
</div>

 <div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'danceradvent'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>




</div>



<div id="footer">
Powered by the  
<a href="http://perldancer.org/" title="Perl Dancer - Perl web framework">
Dancer Perl web framework</a>
</div>
</div>


<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-25174467-2']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</body>
</html>
