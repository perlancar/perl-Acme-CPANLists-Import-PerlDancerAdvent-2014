<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-type" content="text/html; charset=utf-8" />
<title> Your website in a carton box | PerlDancer Advent Calendar</title>
<link rel="stylesheet" href="/css/style.css" />
<link rel="alternate" type="application/rss+xml" title="All Articles " href="/feed/2014" /> 


<!-- Grab Google CDN's jQuery. fall back to local if necessary -->
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js" type="text/javascript"></script>
<script type="text/javascript">/* <![CDATA[ */
    !window.jQuery && document.write('<script src="/javascripts/jquery.js"><\/script>')
/* ]]> */</script>

<!-- Prettyfy -->
<link href="/css/prettify.css" type="text/css" rel="stylesheet" />
<script type="text/javascript" src="/javascripts/prettify.js"></script>

</head>
<body onload="prettyPrint()">
<div id="page">

<div id="sidebar">
<a href="/" class="homelink">Dancer Advent Calendar</a><br />

<p>
The PerlDancer Advent Calendar is a community-driven project that aims 
to showcase the Dancer Perl web framework.
</p>

<p>
Each day of December until Christmas, one article about Dancer. Stay tuned for new moves!
</p>

<ul id="sidebar-items">
<li>
    <h3>About Dancer</h3>
    <ul class="links">
        <li><a href="http://www.perldancer.org/">Dancer homepage</a></li>
        <li><a href="http://twitter.com/PerlDancer">Official Twitter</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer">Dancer on GitHub</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer2">Dancer 2 on GitHub</a></li>
        <li><a class="feed" href="/feed/2014">RSS</a></li>
    </ul>
</li>
</ul>
</div>


<div id="content">
<div class="pod-document"><h1><a name="your_website_in_a_carton_box"></a>Your website in a carton box</h1>

<p>My new favorite way to package <a href="https://metacpan.org/module/Dancer2">Dancer2</a> applications is <a href="https://metacpan.org/module/Carton">Carton</a>.
You setup a single file, type a command or two, and you're done. Here's how
it works and how you set it up yourself.</p>
<h2><a name="what_carton_does"></a>What Carton does?</h2>

<p><a href="https://metacpan.org/module/Carton">Carton</a> sets up a local copy of your project prerequisites. You only need
to define them in a file and ask Carton to download all of them and set them
up.</p>
<p>When you want to deploy your app, you just carry the git clone and ask
Carton to set up the environment again and you will then be able to run it.</p>
<p>The benefit is multi-fold:</p>
<ul>
<li><a name="item_Local_directory_copy"></a><b>Local directory copy</b>
<p>By putting all the dependencies in a local directory, you can make sure
they aren't updated by someone else by accident and their versions locked
to the version you picked.</p>
</li>
<li><a name="item_Sync_versions"></a><b>Sync versions</b>
<p>Deciding which versions of the dependent modules your project needs allows
you to sync this with other developers as well. Now you're all using
the same version and they don't change unless you want update the versions
you want. When updated everyone again uses the same new version of
everything.</p>
</li>
<li><a name="item_Carry_only_the_requirement__not_bundled_modules"></a><b>Carry only the requirement, not bundled modules</b>
<p>Instead of bundling the modules, you only actually bundle the requirements.
Carton builds them for you when you need it.</p>
</li>
</ul>
<h2><a name="setting_it_up"></a>Setting it up</h2>

<p>First thing we do is set up a new app:</p>
<pre class="prettyprint">$ dancer2 -a MyApp
...</pre>

<p>Then we delete the files we don't care about:</p>
<pre class="prettyprint">$ rm -f Makefile.PL MANIFEST MANIFEST.SKIP</pre>

<p>Now let's create a Git repo:</p>
<pre class="prettyprint">$ git init &amp;&amp; git add . &amp;&amp; git commit -m "initial commit"</pre>

<p>Let's add a requirement using the <a href="https://metacpan.org/module/cpanfile">cpanfile</a> format:</p>
<pre class="prettyprint">$ cat &gt; cpanfile
requires 'Dancer2' =&gt; 0.155000;
requires 'Template' =&gt; 0;
recommends 'URL::Encode::XS' =&gt; 0;
recommends 'CGI::Deurl::XS' =&gt; 0;
recommends 'HTTP::Parser::XS' =&gt; 0;</pre>

<p>We can now ask Carton to set it up:</p>
<pre class="prettyprint">$ carton install
Installing modules using [...]
Successfully installed [...]
...
Complete! Modules were install into [...]/local</pre>

<p>Now we have two files: <i>cpanfile</i> and <i>cpanfile.snapshot</i>. We add both of
them to our Git repository and we make sure we don't accidentally add the
<i>local/</i> directory Carton created which holds the modules it installed:</p>
<pre class="prettyprint">$ echo local/ &gt;&gt; .gitignore
$ git add .gitignore cpanfile cpanfile.snapshot
$ git commit -m "Start using carton"</pre>

<p>When we want to update the versions on the production machine, we simply
call:</p>
<pre class="prettyprint">$ carton install --deployment</pre>

<p>By using <code>--deployment</code> we make sure we only install the modules we have in
our <i>cpanfile.snapshot</i> file and do not fallback to querying the CPAN.</p>
<h2><a name="conclusion"></a>Conclusion</h2>

<p>Setting up <a href="https://metacpan.org/module/Carton">Carton</a> takes two minutes and allows us to provide specific
requirements for our applications and a mechanism to install them on a
production machine while ensuring it will create a local copy of everything.</p>
<p>We no longer care about the system module versions and we can maintain
multiple versions of each module used in each separate application. If a
certain application doesn't need to update a module, it just doesn't have to,
and at the same time doesn't prevent another application from updating its
own modules.</p>
<p>Try it out, you'll love it!</p>
<h2><a name="author"></a>Author</h2>

<p>This article has been written by Sawyer X for the Perl
Dancer Advent Calendar 2014.</p>
<h2><a name="copyright"></a>Copyright</h2>

<p>No copyright retained. Enjoy.</p>
<p>2014 // Sawyer X <code>&lt;xsawyerx@cpan.org&gt;</code></p>
</div>

 <div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'danceradvent'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>




</div>



<div id="footer">
Powered by the  
<a href="http://perldancer.org/" title="Perl Dancer - Perl web framework">
Dancer Perl web framework</a>
</div>
</div>


<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-25174467-2']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</body>
</html>
