<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
        "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-type" content="text/html; charset=utf-8" />
<title> Authentication for the masses | PerlDancer Advent Calendar</title>
<link rel="stylesheet" href="/css/style.css" />
<link rel="alternate" type="application/rss+xml" title="All Articles " href="/feed/2014" /> 


<!-- Grab Google CDN's jQuery. fall back to local if necessary -->
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js" type="text/javascript"></script>
<script type="text/javascript">/* <![CDATA[ */
    !window.jQuery && document.write('<script src="/javascripts/jquery.js"><\/script>')
/* ]]> */</script>

<!-- Prettyfy -->
<link href="/css/prettify.css" type="text/css" rel="stylesheet" />
<script type="text/javascript" src="/javascripts/prettify.js"></script>

</head>
<body onload="prettyPrint()">
<div id="page">

<div id="sidebar">
<a href="/" class="homelink">Dancer Advent Calendar</a><br />

<p>
The PerlDancer Advent Calendar is a community-driven project that aims 
to showcase the Dancer Perl web framework.
</p>

<p>
Each day of December until Christmas, one article about Dancer. Stay tuned for new moves!
</p>

<ul id="sidebar-items">
<li>
    <h3>About Dancer</h3>
    <ul class="links">
        <li><a href="http://www.perldancer.org/">Dancer homepage</a></li>
        <li><a href="http://twitter.com/PerlDancer">Official Twitter</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer">Dancer on GitHub</a></li>
        <li><a href="http://github.com/PerlDancer/Dancer2">Dancer 2 on GitHub</a></li>
        <li><a class="feed" href="/feed/2014">RSS</a></li>
    </ul>
</li>
</ul>
</div>


<div id="content">
<div class="pod-document"><h1><a name="authentication_for_the_masses"></a>Authentication for the masses</h1>

<p>Just like at some point every developer writes a templating system,
every web developer eventually writes a form for authentication.</p>
<p>It's simple: we check the user credentials on a request and decide whether
to continue or redirect them to a form. The form allows them to submit
their username and password and we save that and create a session for them
so when they now try the original request, we recognize them and allow them
in.</p>
<h2><a name="basic_application"></a>Basic application</h2>

<p>The application is fairly simple. We have a route that needs
authentication, we have a route for showing the login page, and we have a
route for posting login information and creating a session.</p>
<pre class="prettyprint">package MyApp;
use Dancer2;

get '/' =&gt; sub {
    session('user')
        or redirect('/login');

    template index =&gt; {};
};

get '/login' =&gt; sub {
    template login =&gt; {};
};

post '/login' =&gt; sub {
    my $username  = param('username');
    my $password  = param('password');
    my $redir_url = param('redirect_url') || '/login';

    $username eq 'john' &amp;&amp; $password eq 'correcthorsebatterystaple'
        or redirect $redir_url;

    session user =&gt; $username;
    redirect $redir_url;
};</pre>

<h2><a name="tiny_authentication_helper"></a>Tiny authentication helper</h2>

<p><a href="https://metacpan.org/module/Dancer2::Plugin::Auth::Tiny">Dancer2::Plugin::Auth::Tiny</a> allows you to
abstract away not only the part that checks whether the session exists, but to
also generate a redirect with the right path and return URL.</p>
<p>We simply have to define what routes needs a login using Auth::Tiny's
<code>needs</code> keyword.</p>
<pre class="prettyprint">get '/' =&gt; needs login =&gt; sub {
    template index =&gt; {};
};</pre>

<p>It creates a proper return URL using <code>uri_for</code> and the address from
which the user arrived - something we didn't do ourselves.</p>
<p>We can thus decorate all of our private routes to require authentication
in this simple manner. If a user does not have a session, it will
automatically forward it to <code>/login</code>, in which we would render a form
for the user to send a login request.</p>
<p>Auth::Tiny even provides us with a new parameter, <code>return_url</code>, which we
can use to send the user back to their original requested path.</p>
<p>We will still need to handle the password verification, but we have yet
another small helper for this.</p>
<h2><a name="password_hashing"></a>Password hashing</h2>

<p>Many web developers don't understand the importance of hashing passwords.
There are many articles to explain this, but few spend the time
to read and understand them. From the multitude of methods available, and
the different hashing alogrithms out there, it's not a simple task to
decide on which combination to use and how.</p>
<p><a href="https://metacpan.org/module/Dancer2::Plugin::Passphrase">Dancer2::Plugin::Passphrase</a> (recently ported from Dancer 1) provides
a simple passwords-as-objects interface with sane defaults for hashed
passwords which you can use in your web application. It uses <b>bcrypt</b>
as the default but supports anything the <a href="https://metacpan.org/module/Digest">Digest</a> interface does.</p>
<p>Assuming we have the original user-creation form submitting a username
and password:</p>
<pre class="prettyprint">package MyApp;
use Dancer2;
use Dancer2::Plugin::Passphrase;
post '/register' =&gt; sub {
    my $username = param('username');
    my $password = passphrase( param('password') )-&gt;generate;

    # $password is now a hashed password object
    save_user_in_db( $username, $password-&gt;rfc2307 );

    template registered =&gt; { success =&gt; 1 };
};</pre>

<p>We can now add the <b>POST</b> method for verifying that username and
password:</p>
<pre class="prettyprint">post '/login' =&gt; sub {
    my $username   = param('username');
    my $password   = param('password');
    my $saved_pass = fetch_password_from_db($username);

    if ( passphrase($password)-&gt;matches($saved_pass) ) {
        session user =&gt; $username;
        redirect param('return_url') || '/';
    }

    # let's render instead of redirect...
    template login =&gt; { error =&gt; 'Invalid username or password' };
};</pre>

<h2><a name="conclusion"></a>Conclusion</h2>

<p>Both <a href="https://metacpan.org/module/Dancer2::Plugin::Auth::Tiny">Dancer2::Plugin::Auth::Tiny</a> and <a href="https://metacpan.org/module/Dancer2::Plugin::Passphrase">Dancer2::Plugin::Passphrase</a>
are simple wrappers around basic functionality. You can check their code,
it's pretty simple and straight-forward.</p>
<p>The strength of plugins are not necessarily in complicated and weird code,
but rather in abstracting difficult things to remember and get right, and
making them accessible in your web environment and integrated with your
application configuration.</p>
<p>Authentication is not just easier with these modules, but safer.</p>
<p>You might also want to read up on <a href="https://metacpan.org/module/Dancer2::Plugin::Auth::Extensible">Dancer2::Plugin::Auth::Extensible</a>.</p>
<h2><a name="author"></a>Author</h2>

<p>This article has been written by Sawyer X for the Perl
Dancer Advent Calendar 2014.</p>
<h2><a name="copyright"></a>Copyright</h2>

<p>No copyright retained. Enjoy.</p>
<p>2014 // Sawyer X <code>&lt;xsawyerx@cpan.org&gt;</code></p>
</div>

 <div id="disqus_thread"></div>
    <script type="text/javascript">
        /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
        var disqus_shortname = 'danceradvent'; // required: replace example with your forum shortname

        /* * * DON'T EDIT BELOW THIS LINE * * */
        (function() {
            var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
            dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
            (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
        })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>




</div>



<div id="footer">
Powered by the  
<a href="http://perldancer.org/" title="Perl Dancer - Perl web framework">
Dancer Perl web framework</a>
</div>
</div>


<script type="text/javascript">

  var _gaq = _gaq || [];
  _gaq.push(['_setAccount', 'UA-25174467-2']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();

</script>
</body>
</html>
